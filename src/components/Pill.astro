---
import Emblem from "./Emblem.astro";

interface Props {
  image?: string;
  color: string;
  interactive?: boolean;
  className?: string;
}

const { className, image, color, interactive } = Astro.props;
const val = Math.random();
const animationDelay = `${Math.floor(Math.random() * -40)}s`;
const animationName = val > 0.3 ? "mymove2" : val > 0.6 ? "mymove" : "mymove3";
---

<div class:list={[className, { interactive }]} style={{ backgroundColor: color }}>
  {image && <Emblem color={color} image={image} />}
  <span><slot /></span>
</div>

<style define:vars={{ animationName, animationDelay }}>
  div {
    width: 100%;
    padding: 8px 16px;
    border-radius: 6px;
    clip-path: inset(0% 0% 0% 0% round 6px);
    display: flex;
    gap: 8px;
    min-width: 145px;
    background-image: radial-gradient(
      circle at 50% 2.3e2%,
      rgba(255, 255, 255, 0.33) 0%,
      rgba(0, 0, 0, 0.33) 75%
    );
  }

  .interactive:hover {
    background-image: url("../assets/pattern.png");
    animation-timing-function: linear;
    animation-duration: 40s;
    animation-iteration-count: infinite;
    animation-name: var(--animationName);
    animation-delay: var(--animationDelay);
    background-blend-mode: overlay;
  }

  span {
    font-size: 20px;
    line-height: 1.6;
    color: #fff;
  }

  @keyframes mymove {
    0% {
      background-position: 0 0;
    }
    50% {
      background-position: 100% 50%;
    }
    99% {
      background-position: 0 0;
    }
  }
  @keyframes mymove2 {
    0% {
      background-position: 50% 0;
    }

    50% {
      background-position: 100% 50%;
    }

    99% {
      background-position: 50% 0;
    }
  }

  @keyframes mymove3 {
    0% {
      background-position: 100% 0;
    }

    50% {
      background-position: 0% 50%;
    }

    99% {
      background-position: 100% 0;
    }
  }
</style>
